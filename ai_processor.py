# -*- coding: utf-8 -*-
import asyncio
import logging
import re
from typing import Optional
from openai import AsyncOpenAI
from config import DEEPSEEK

logger = logging.getLogger(__name__)


async def load_prompt() -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è UTF-8
        try:
            with open('prompt.txt', 'r', encoding='utf-8') as f:
                content = f.read().strip()
                logger.info("‚úÖ –ü—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ (UTF-8)")
                return content
        except UnicodeDecodeError:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º CP1251 (Windows)
            with open('prompt.txt', 'r', encoding='cp1251') as f:
                content = f.read().strip()
                logger.info("‚úÖ –ü—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ (CP1251)")
                return content
    except FileNotFoundError:
        logger.warning("‚ö†Ô∏è prompt.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
        return """–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞. 
–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–π –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å—É—Ç—å, –Ω–æ —É–ª—É—á—à–∏–≤ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É.

–í–ê–ñ–ù–û: 
- –í—Å–µ —Å—Å—ã–ª–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ —Å —Ç–µ–≥–æ–º <a href="URL">—Ç–µ–∫—Å—Ç</a>
- –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è (@username), —Å–æ—Ö—Ä–∞–Ω–∏ –∏—Ö –∫–∞–∫ –µ—Å—Ç—å
- –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –æ–±—ã—á–Ω–æ–º —Ç–µ–∫—Å—Ç–µ —Å HTML-—Å—Å—ã–ª–∫–∞–º–∏, –ë–ï–ó —Ç–µ–≥–æ–≤ <p>, <div>, <html>, <!doctype> –∏ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Ç–µ–≥–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–µ–≥–∏ <a>, <b>, <i>, <u>, <s>, <code>, <pre>
- –°–æ—Ö—Ä–∞–Ω–∏ —Å–º—ã—Å–ª –∏ —Ç–æ–Ω –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
- –£–ª—É—á—à–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å"""


def clean_html_for_telegram(text: str) -> str:
    """–û—á–∏—â–∞–µ—Ç HTML –æ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö Telegram —Ç–µ–≥–æ–≤"""
    if not text:
        return ""

    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ HTML —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ Telegram –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç
    unwanted_tags = [
        r'<!DOCTYPE[^>]*>',
        r'</?html[^>]*>',
        r'</?head[^>]*>',
        r'</?body[^>]*>',
        r'</?div[^>]*>',
        r'</?p[^>]*>',
        r'</?span[^>]*>',
        r'</?section[^>]*>',
        r'</?article[^>]*>',
        r'</?header[^>]*>',
        r'</?footer[^>]*>',
        r'</?main[^>]*>',
        r'</?nav[^>]*>',
        r'</?aside[^>]*>',
        r'</?h[1-6][^>]*>',
        r'</h[1-6]>',
        r'</?ul[^>]*>',
        r'</?ol[^>]*>',
        r'</?li[^>]*>',
        r'</?br[^>]*/?>'
    ]

    cleaned_text = text
    for pattern in unwanted_tags:
        cleaned_text = re.sub(pattern, '', cleaned_text, flags=re.IGNORECASE)

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    cleaned_text = re.sub(r'\n\s*\n', '\n\n', cleaned_text)  # –î–≤–æ–π–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã –æ—Å—Ç–∞–≤–ª—è–µ–º
    cleaned_text = re.sub(r'[ \t]+', ' ', cleaned_text)  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –æ–¥–∏–Ω
    cleaned_text = cleaned_text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏
    allowed_tags = r'</?(?:a|b|i|u|s|code|pre)(?:\s[^>]*)?>|<a\s+href=["\'][^"\']*["\'][^>]*>'

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–µ–≥–∏
    all_tags = re.findall(r'<[^>]+>', cleaned_text)

    # –£–¥–∞–ª—è–µ–º –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏
    for tag in all_tags:
        if not re.match(allowed_tags, tag, re.IGNORECASE):
            cleaned_text = cleaned_text.replace(tag, '')
            logger.warning(f"‚ö†Ô∏è –£–¥–∞–ª–µ–Ω –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–µ–≥: {tag}")

    return cleaned_text


async def process_with_deepseek(text: str, links: str) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ DeepSeek AI"""
    if not text.strip():
        logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return ""

    try:
        prompt = await load_prompt()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        user_content = f"""
–¢–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:
{text}

–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è:
{links}

–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–π —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø—Ä–æ–º–ø—Ç–µ.
–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ —Å—Å—ã–ª–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º HTML —Ñ–æ—Ä–º–∞—Ç–µ.
–í–ê–ñ–ù–û: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–≥–∏ <p>, <div>, <html>, <!doctype> –∏ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —Ç–µ–≥–∏!
–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–µ–≥–∏: <a>, <b>, <i>, <u>, <s>, <code>, <pre>
"""

        client = AsyncOpenAI(
            api_key=DEEPSEEK,
            base_url="https://api.deepseek.com"
        )

        logger.info(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ DeepSeek (–¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤)")

        response = await client.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": user_content}
            ],
            max_tokens=4000,
            temperature=0.7
        )

        result = response.choices[0].message.content.strip()

        # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–µ–≥–æ–≤
        cleaned_result = clean_html_for_telegram(result)

        logger.info(f"‚úÖ AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(cleaned_result)} —Å–∏–º–≤–æ–ª–æ–≤)")

        return cleaned_result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ò–ò: {str(e)}\n\n–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{text}"