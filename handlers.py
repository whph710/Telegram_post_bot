# -*- coding: utf-8 -*-
import logging
import asyncio
from collections import defaultdict
from typing import Dict, List

from aiogram import types, F, Router
from aiogram.enums import ContentType
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.callback_data import CallbackData

from bot import bot
from config import GROUP_ID, MY_ID
from link_extractor import extract_links_from_entities, format_links_for_ai
from ai_processor import process_with_deepseek
from media_handler import MediaProcessor

router = Router()
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
albums: Dict[str, List[types.Message]] = defaultdict(list)
album_timers: Dict[str, asyncio.Task] = {}
pending_posts: Dict[int, Dict] = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤

media_processor = MediaProcessor()


class PostAction(CallbackData, prefix="post"):
    action: str
    post_id: int


def create_preview_keyboard(post_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úÖ –ó–∞–ø–æ—Å—Ç–∏—Ç—å",
                callback_data=PostAction(action="publish", post_id=post_id).pack()
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data=PostAction(action="cancel", post_id=post_id).pack()
            )
        ],
        [
            InlineKeyboardButton(
                text="‚úèÔ∏è –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å",
                callback_data=PostAction(action="edit", post_id=post_id).pack()
            ),
            InlineKeyboardButton(
                text="üóë –£–¥–∞–ª–∏—Ç—å",
                callback_data=PostAction(action="delete", post_id=post_id).pack()
            )
        ]
    ])


async def show_preview(user_id: int, processed_text: str, original_messages: List[types.Message] = None,
                       original_message: types.Message = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    post_id = len(pending_posts) + 1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
    pending_posts[post_id] = {
        'processed_text': processed_text,
        'original_messages': original_messages,
        'original_message': original_message,
        'user_id': user_id,
        'awaiting_edit': False
    }

    preview_text = f"–ü–†–ï–î–ü–†–û–°–ú–û–¢–† –ü–û–°–¢–ê #{post_id}\n\n{processed_text}\n\n--- –ö–û–ù–ï–¶ –ü–û–°–¢–ê ---"

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    if len(preview_text) > 4000:
        preview_text = preview_text[:3950] + "...\n\n--- –¢–ï–ö–°–¢ –û–ë–†–ï–ó–ê–ù ---"

    keyboard = create_preview_keyboard(post_id)

    try:
        await bot.send_message(
            chat_id=user_id,
            text=preview_text,
            reply_markup=keyboard,
            parse_mode="HTML",
            disable_web_page_preview=True  # –î–û–ë–ê–í–õ–ï–ù–û: –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ #{post_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")


async def process_and_send_album(media_group_id: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–ª—å–±–æ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä"""
    await asyncio.sleep(2)

    if media_group_id not in albums:
        return

    album_messages = albums.pop(media_group_id)
    album_timers.pop(media_group_id, None)

    if not album_messages:
        return

    try:
        first_message = album_messages[0]
        original_text = first_message.caption or ""
        caption_entities = first_message.caption_entities

        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–ª—å–±–æ–º —Å —Ç–µ–∫—Å—Ç–æ–º: {original_text[:100]}...")

        links_data = extract_links_from_entities(original_text, caption_entities)
        formatted_links = format_links_for_ai(links_data)

        logger.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –≤ –∞–ª—å–±–æ–º–µ: {formatted_links}")

        processed_text = await process_with_deepseek(original_text, formatted_links)

        if len(processed_text) > 1024:
            logger.warning(f"–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(processed_text)} —Å–∏–º–≤–æ–ª–æ–≤), –æ–±—Ä–µ–∑–∞–µ–º –¥–ª—è –º–µ–¥–∏–∞")
            processed_text = processed_text[:1020] + "..."

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        await show_preview(MY_ID, processed_text, original_messages=album_messages)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª—å–±–æ–º–∞: {e}")


async def process_and_send_single(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä"""
    try:
        text = message.text or message.caption or ""
        entities = message.entities or message.caption_entities

        links_data = extract_links_from_entities(text, entities)
        formatted_links = format_links_for_ai(links_data)

        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text[:100]}...")
        logger.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏: {formatted_links}")

        processed_text = await process_with_deepseek(text, formatted_links)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        await show_preview(MY_ID, processed_text, original_message=message)

        logger.info(f"–û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def publish_post(post_id: int):
    """–ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –≤ –≥—Ä—É–ø–ø—É"""
    if post_id not in pending_posts:
        return False

    post_data = pending_posts[post_id]
    processed_text = post_data['processed_text']

    try:
        if post_data['original_messages']:
            # –ê–ª—å–±–æ–º
            messages = post_data['original_messages']
            media_group = media_processor.build_media_group(messages, processed_text)
            await bot.send_media_group(
                chat_id=GROUP_ID,
                media=media_group.build()
            )
            logger.info(f"–ê–ª—å–±–æ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω (–ø–æ—Å—Ç #{post_id})")

        elif post_data['original_message']:
            # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = post_data['original_message']
            media_info = media_processor.extract_media_info(message)

            if media_info['has_media']:
                if media_info['type'] in ['photo', 'video', 'document']:
                    media_group = media_processor.build_single_media_group(message, processed_text)
                    await bot.send_media_group(
                        chat_id=GROUP_ID,
                        media=media_group.build()
                    )
                elif media_info['type'] == 'animation':
                    await bot.send_animation(
                        chat_id=GROUP_ID,
                        animation=media_info['file_id'],
                        caption=processed_text,
                        parse_mode="HTML",
                        disable_web_page_preview=True  # –î–û–ë–ê–í–õ–ï–ù–û: –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é
                    )
                elif media_info['type'] == 'voice':
                    await bot.send_voice(
                        chat_id=GROUP_ID,
                        voice=media_info['file_id'],
                        caption=processed_text,
                        parse_mode="HTML",
                        disable_web_page_preview=True  # –î–û–ë–ê–í–õ–ï–ù–û: –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é
                    )
                elif media_info['type'] == 'video_note':
                    await bot.send_video_note(
                        chat_id=GROUP_ID,
                        video_note=media_info['file_id']
                    )
                    if processed_text.strip():
                        await bot.send_message(
                            chat_id=GROUP_ID,
                            text=processed_text,
                            parse_mode="HTML",
                            disable_web_page_preview=True  # –î–û–ë–ê–í–õ–ï–ù–û: –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é
                        )
            else:
                # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                if processed_text.strip():
                    await bot.send_message(
                        chat_id=GROUP_ID,
                        text=processed_text,
                        parse_mode="HTML",
                        disable_web_page_preview=True  # –î–û–ë–ê–í–õ–ï–ù–û: –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é
                    )

            logger.info(f"–û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ (–ø–æ—Å—Ç #{post_id})")

        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
        del pending_posts[post_id]
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ #{post_id}: {e}")
        return False


@router.callback_query(PostAction.filter())
async def handle_post_action(callback: types.CallbackQuery, callback_data: PostAction):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ—Å—Ç–æ–º"""
    post_id = callback_data.post_id
    action = callback_data.action

    if post_id not in pending_posts:
        await callback.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    post_data = pending_posts[post_id]

    if action == "publish":
        success = await publish_post(post_id)
        if success:
            await callback.message.edit_text(
                f"–ü–æ—Å—Ç #{post_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!",
                reply_markup=None
            )
            await callback.answer("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
        else:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", show_alert=True)

    elif action == "cancel":
        del pending_posts[post_id]
        await callback.message.edit_text(
            f"–ü–æ—Å—Ç #{post_id} –æ—Ç–º–µ–Ω–µ–Ω",
            reply_markup=None
        )
        await callback.answer("–ü–æ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω")

    elif action == "edit":
        post_data['awaiting_edit'] = True
        await callback.message.edit_text(
            f"–ü–æ—Å—Ç #{post_id} –æ–∂–∏–¥–∞–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏:",
            reply_markup=None
        )
        await callback.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫ –ø–æ—Å—Ç—É")

    elif action == "delete":
        del pending_posts[post_id]
        await callback.message.delete()
        await callback.answer("–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω")


@router.message(F.text & (F.from_user.id == MY_ID))
async def handle_edit_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ—Å—Ç—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏
    awaiting_post = None
    for post_id, post_data in pending_posts.items():
        if post_data.get('awaiting_edit', False) and post_data['user_id'] == message.from_user.id:
            awaiting_post = post_id
            break

    if awaiting_post:
        # –≠—Ç–æ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞
        post_data = pending_posts[awaiting_post]
        original_text = post_data['processed_text']
        edit_text = message.text

        combined_text = f"{original_text}\n\n{edit_text}"

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ AI —Å prompt2.txt
        try:
            processed_text = await process_with_deepseek(
                combined_text,
                "–°—Å—ã–ª–∫–∏ –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                prompt_file='prompt2.txt'
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
            post_data['processed_text'] = processed_text
            post_data['awaiting_edit'] = False

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
            await show_preview(MY_ID, processed_text,
                               original_messages=post_data.get('original_messages'),
                               original_message=post_data.get('original_message'))

            logger.info(f"–ü–æ—Å—Ç #{awaiting_post} –¥–æ—Ä–∞–±–æ—Ç–∞–Ω –∏ –ø–æ–∫–∞–∑–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞: {e}")
            await message.reply(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏: {e}")
    else:
        # –≠—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await process_and_send_single(message)


@router.message(F.media_group_id & (F.from_user.id == MY_ID))
async def handle_album_part(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏ –∞–ª—å–±–æ–º–∞"""
    media_group_id = message.media_group_id
    albums[media_group_id].append(message)

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞ {media_group_id} ({len(albums[media_group_id])}/...)")

    if media_group_id in album_timers:
        album_timers[media_group_id].cancel()

    album_timers[media_group_id] = asyncio.create_task(
        process_and_send_album(media_group_id)
    )


@router.message(
    (F.content_type.in_({
        ContentType.PHOTO,
        ContentType.VIDEO,
        ContentType.DOCUMENT,
        ContentType.ANIMATION,
        ContentType.VOICE,
        ContentType.VIDEO_NOTE
    })) & (F.from_user.id == MY_ID)
)
async def handle_single_media(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if message.media_group_id:
        return  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –∞–ª—å–±–æ–º

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–¥–∏–Ω–æ—á–Ω–æ–µ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await process_and_send_single(message)