# -*- coding: utf-8 -*-
import logging
import asyncio
from collections import defaultdict
from typing import Dict, List

from aiogram import types, F, Router
from aiogram.enums import ContentType

from bot import bot
from config import GROUP_ID, MY_ID
from link_extractor import extract_links_from_entities, format_links_for_ai
from ai_processor import process_with_deepseek
from media_handler import MediaProcessor

router = Router()
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø
albums: Dict[str, List[types.Message]] = defaultdict(list)
album_timers: Dict[str, asyncio.Task] = {}

media_processor = MediaProcessor()


async def process_and_send_album(media_group_id: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª—å–±–æ–º —Å AI –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    await asyncio.sleep(2)  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –º–µ–¥–∏–∞

    if media_group_id not in albums:
        return

    album_messages = albums.pop(media_group_id)
    album_timers.pop(media_group_id, None)

    if not album_messages:
        return

    try:
        # –ë–µ—Ä–µ–º caption –∏ entities –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        first_message = album_messages[0]
        original_text = first_message.caption or ""
        caption_entities = first_message.caption_entities

        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–ª—å–±–æ–º —Å —Ç–µ–∫—Å—Ç–æ–º: {original_text[:100]}...")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏
        links_data = extract_links_from_entities(original_text, caption_entities)
        formatted_links = format_links_for_ai(links_data)

        logger.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –≤ –∞–ª—å–±–æ–º–µ: {formatted_links}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ AI
        processed_text = await process_with_deepseek(original_text, formatted_links)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        if len(processed_text) > 1024:
            logger.warning(f"–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(processed_text)} —Å–∏–º–≤–æ–ª–æ–≤), –æ–±—Ä–µ–∑–∞–µ–º")
            processed_text = processed_text[:1020] + "..."

        # –°—Ç—Ä–æ–∏–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        media_group = media_processor.build_media_group(album_messages, processed_text)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
        await bot.send_media_group(chat_id=GROUP_ID, media=media_group.build())

        logger.info(f"–ê–ª—å–±–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ({len(album_messages)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤) —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º")

    except Exception as e:
        logger.error(f"–û —à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª—å–±–æ–º–∞: {e}")

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏
        try:
            first_message = album_messages[0]
            fallback_text = first_message.caption or ""

            if len(fallback_text) > 1024:
                fallback_text = fallback_text[:1020] + "..."

            media_group = media_processor.build_media_group(album_messages, fallback_text)
            await bot.send_media_group(chat_id=GROUP_ID, media=media_group.build())

            logger.info("–ê–ª—å–±–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º (fallback)")

        except Exception as fallback_error:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º–∞: {fallback_error}")


async def process_and_send_single(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫–∏
        text = message.text or message.caption or ""
        entities = message.entities or message.caption_entities

        links_data = extract_links_from_entities(text, entities)
        formatted_links = format_links_for_ai(links_data)

        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text[:100]}...")
        logger.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏: {formatted_links}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ AI
        processed_text = await process_with_deepseek(text, formatted_links)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        media_info = media_processor.extract_media_info(message)

        if media_info['has_media']:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –º–µ–¥–∏–∞ (–æ–¥–∏–Ω–æ—á–Ω–æ–µ –º–µ–¥–∏–∞ –∫–∞–∫ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è)
            if media_info['type'] in ['photo', 'video', 'document']:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
                if len(processed_text) > 1024:
                    logger.warning(f"‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(processed_text)} —Å–∏–º–≤–æ–ª–æ–≤), –æ–±—Ä–µ–∑–∞–µ–º")
                    processed_text = processed_text[:1020] + "..."

                media_group = media_processor.build_single_media_group(message, processed_text)
                await bot.send_media_group(chat_id=GROUP_ID, media=media_group.build())
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞ (animation, voice, video_note) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                if media_info['type'] == 'animation':
                    await bot.send_animation(
                        chat_id=GROUP_ID,
                        animation=media_info['file_id'],
                        caption=processed_text,
                        parse_mode="HTML"
                    )
                elif media_info['type'] == 'voice':
                    await bot.send_voice(
                        chat_id=GROUP_ID,
                        voice=media_info['file_id'],
                        caption=processed_text,
                        parse_mode="HTML"
                    )
                elif media_info['type'] == 'video_note':
                    # Video note –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç caption, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
                    await bot.send_video_note(chat_id=GROUP_ID, video_note=media_info['file_id'])
                    if processed_text.strip():
                        await bot.send_message(
                            chat_id=GROUP_ID,
                            text=processed_text,
                            parse_mode="HTML"
                        )
        else:
            # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            if processed_text.strip():
                await bot.send_message(
                    chat_id=GROUP_ID,
                    text=processed_text,
                    parse_mode="HTML"
                )

        logger.info(f"‚úÖ –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            original_text = message.text or message.caption or ""
            if original_text.strip():
                await bot.send_message(
                    chat_id=GROUP_ID,
                    text=original_text,
                    parse_mode=None  # –ë–µ–∑ HTML –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                )
                logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (fallback)")
        except Exception as fallback_error:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {fallback_error}")


@router.message(F.media_group_id & (F.from_user.id == MY_ID))
async def handle_album_part(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏ –∞–ª—å–±–æ–º–∞"""
    media_group_id = message.media_group_id
    albums[media_group_id].append(message)

    logger.info(f"üì∏ –ü–æ–ª—É—á–µ–Ω–∞ —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞ {media_group_id} ({len(albums[media_group_id])}/...)")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä
    if media_group_id in album_timers:
        album_timers[media_group_id].cancel()

    album_timers[media_group_id] = asyncio.create_task(
        process_and_send_album(media_group_id)
    )


@router.message(
    (F.content_type.in_({
        ContentType.TEXT,
        ContentType.PHOTO,
        ContentType.VIDEO,
        ContentType.DOCUMENT,
        ContentType.ANIMATION,
        ContentType.VOICE,
        ContentType.VIDEO_NOTE
    })) & (F.from_user.id == MY_ID)
)
async def handle_single_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if message.media_group_id:
        return  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –∞–ª—å–±–æ–º

    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await process_and_send_single(message)