# -*- coding: utf-8 -*-
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from states import Menu, PostCreation, QueueView, Settings
from keyboards import (
    MenuAction, create_main_menu, create_settings_keyboard,
    create_queue_keyboard, create_back_to_menu_keyboard
)
from config import ADMIN_ID, MESSAGES, GROUP_ID
from utils.post_storage import post_storage
from utils.time_slots import time_slot_manager

router = Router()
logger = logging.getLogger(__name__)


@router.message(Command("start", "menu"))
@router.message(F.text.in_(["–ú–µ–Ω—é", "–í –º–µ–Ω—é", "/menu"]))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /menu"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
        return

    await state.set_state(Menu.main)

    await message.answer(
        text=MESSAGES['start_welcome'],
        reply_markup=create_main_menu()
    )


@router.callback_query(MenuAction.filter(F.action == "main"))
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.set_state(Menu.main)

    await callback.message.edit_text(
        text=MESSAGES['start_welcome'],
        reply_markup=create_main_menu()
    )
    await callback.answer()


@router.callback_query(MenuAction.filter(F.action == "create_post"))
async def start_post_creation(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    await state.set_state(PostCreation.waiting)

    await callback.message.edit_text(
        text=MESSAGES['post_creation_prompt'],
        reply_markup=create_back_to_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(MenuAction.filter(F.action == "auto_mode_info"))
async def show_auto_mode_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ"""
    info_text = (
        f"üîÑ **–†–ï–ñ–ò–ú AUTO –ê–ö–¢–ò–í–ï–ù**\n\n"
        f"–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É (—Ç–µ–∫—Å—Ç, –º–µ–¥–∏–∞, –∞–ª—å–±–æ–º) "
        f"‚Äî –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:\n\n"
        f"‚Ä¢ –°—Ä–µ–∂–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ Telegram-–∫–∞–Ω–∞–ª—ã\n"
        f"‚Ä¢ –£–±–µ—Ä–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è (@username)\n"
        f"‚Ä¢ –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã\n"
        f"‚Ä¢ –î–æ–±–∞–≤–∏—Ç –ø–æ–¥–ø–∏—Å—å –∫–∞–Ω–∞–ª–∞\n"
        f"‚Ä¢ –ü–æ–∫–∞–∂–µ—Ç –ø—Ä–µ–≤—å—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n"
        f"üìã **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∏–Ω–≥–∞:**\n"
        f"{time_slot_manager.get_schedule_summary()}\n\n"
        f"–¢–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞: `{GROUP_ID}`"
    )

    await callback.message.edit_text(
        text=info_text,
        reply_markup=create_back_to_menu_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(MenuAction.filter(F.action == "settings"))
async def show_settings(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await state.set_state(Settings.main)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–µ
    admin_username = "admin"  # –ó–∞–≥–ª—É—à–∫–∞
    admin_id = ADMIN_ID
    group_name = f"–ì—Ä—É–ø–ø–∞ {GROUP_ID}"  # –ó–∞–≥–ª—É—à–∫–∞

    settings_text = (
        f"‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê**\n\n"
        f"üë§ –¢–µ–∫—É—â–∏–π –∞–¥–º–∏–Ω: @{admin_username} ({admin_id})\n"
        f"üì¢ –ì—Ä—É–ø–ø–∞ –¥–ª—è –ø–æ—Å—Ç–æ–≤: {group_name}\n"
        f"ID: `{GROUP_ID}`\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"
    )

    await callback.message.edit_text(
        text=settings_text,
        reply_markup=create_settings_keyboard(
            admin_username=admin_username,
            admin_id=admin_id,
            group_name=group_name,
            group_id=GROUP_ID
        ),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(MenuAction.filter(F.action == "queue"))
async def show_queue(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ—Å—Ç–æ–≤"""
    await state.set_state(QueueView.viewing)

    try:
        scheduled_posts = post_storage.get_scheduled_posts(limit=10)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –ø–æ—Å—Ç–æ–≤: {e}")
        scheduled_posts = []

    if not scheduled_posts:
        await callback.message.edit_text(
            text=MESSAGES['queue_empty'],
            reply_markup=create_back_to_menu_keyboard()
        )
        await callback.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤
    queue_text_lines = [
        MESSAGES['queue_title'].format(count=len(scheduled_posts)),
        ""
    ]

    for idx, post in enumerate(scheduled_posts, 1):
        # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –ø—Ä–µ–≤—å—é
        post_preview = post['processed_text'][:50] if post['processed_text'] else "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞"
        if len(post.get('processed_text', '')) > 50:
            post_preview += "..."

        try:
            formatted_time = time_slot_manager.format_datetime_for_user(post['publish_time'])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ—Å—Ç–∞ {post.get('id')}: {e}")
            formatted_time = "–û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–∏"

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ HTML —Ç–µ–≥–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        queue_text_lines.append(
            f"üìÖ {idx}. {formatted_time}\n"
            f"   \"{post_preview}\""
        )

    queue_text = "\n\n".join(queue_text_lines)

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(queue_text) > 4000:
        queue_text = queue_text[:3900] + "\n\n... (—Å–ø–∏—Å–æ–∫ –æ–±—Ä–µ–∑–∞–Ω)"

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ HTML –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
    await callback.message.edit_text(
        text=queue_text,
        reply_markup=create_queue_keyboard()
    )
    await callback.answer()


# –î–û–ë–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback'–æ–≤ –∏–∑ –ª–æ–≥–æ–≤
@router.callback_query(F.data.startswith("post:"))
async def handle_post_callbacks(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –ø–æ—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    callback_parts = callback.data.split(":")

    if len(callback_parts) >= 3:
        action = callback_parts[1]
        try:
            post_id = int(callback_parts[2])
        except ValueError:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ—Å—Ç–∞", show_alert=True)
            return

        if action == "publish":
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            from handlers.post_creation import handle_publish_now
            post_data = post_storage.get_pending_post(post_id)
            if post_data:
                await handle_publish_now(callback, post_data, post_id)
            else:
                await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

        elif action == "delete":
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è
            success = post_storage.remove_pending_post(post_id)
            if success:
                await callback.message.delete()
                await callback.answer("üóë –ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω")
            else:
                await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

        elif action == "schedule":
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            await callback.answer("‚è∞ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç' –≤ –ø—Ä–µ–≤—å—é")

        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ—Å—Ç–æ–º: {action}")
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
    else:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback'–æ–≤ –≤ –º–µ–Ω—é
@router.callback_query(StateFilter(Menu.main))
async def handle_unknown_menu_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback'–æ–≤ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é: {callback.data}")
    await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)