# -*- coding: utf-8 -*-
import logging
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from states import PostCreation, Menu
from keyboards import (
    ScheduleAction, create_scheduler_keyboard, create_back_to_menu_keyboard
)
from config import ADMIN_ID, MESSAGES
from utils.post_storage import post_storage
from utils.time_slots import time_slot_manager
from services.scheduler_service import scheduler_service

router = Router()
logger = logging.getLogger(__name__)


async def show_scheduler(callback: CallbackQuery, state: FSMContext, post_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤—Ä–µ–º–µ–Ω–∏"""
    await state.set_state(PostCreation.scheduling)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(scheduling_post_id=post_id)

    schedule_text = (
        f"‚è∞ **–ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –ü–û–°–¢–ê #{post_id}**\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–¥–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç:\n\n"
        f"üìã **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∏–Ω–≥–∞:**\n"
        f"{time_slot_manager.get_schedule_summary()}"
    )

    await callback.message.edit_text(
        text=schedule_text,
        reply_markup=create_scheduler_keyboard(post_id),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(ScheduleAction.filter())
async def handle_schedule_action(callback: CallbackQuery, callback_data: ScheduleAction, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    action = callback_data.action
    post_id = callback_data.post_id
    option = callback_data.option

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç
    post_data = post_storage.get_pending_post(post_id)
    if not post_data:
        await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if action == "quick":
        # –ë—ã—Å—Ç—Ä–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        await handle_quick_schedule(callback, post_id, option, state)

    elif action == "custom":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –≤—Ä–µ–º—è
        await handle_custom_time_request(callback, post_id, state)

    elif action == "distribute":
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        await handle_auto_distribute(callback, post_id, state)


async def handle_quick_schedule(callback: CallbackQuery, post_id: int, option: str, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ–ø—Ü–∏–∏
        schedule_time = time_slot_manager.get_quick_schedule_time(option, datetime.now())

        if not schedule_time:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
        post_data = post_storage.get_pending_post(post_id)
        if not post_data:
            await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ—Å—Ç
        scheduled_id = post_storage.schedule_post(
            processed_text=post_data['processed_text'],
            publish_time=schedule_time,
            user_id=post_data['user_id'],
            original_message=post_data.get('original_message'),
            original_messages=post_data.get('original_messages')
        )

        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
        post_storage.remove_pending_post(post_id)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        formatted_time = time_slot_manager.format_datetime_for_user(schedule_time)

        await callback.message.edit_text(
            text=MESSAGES['post_scheduled'].format(time=formatted_time),
            reply_markup=create_back_to_menu_keyboard()
        )
        await callback.answer(f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {formatted_time}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.set_state(Menu.main)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)


async def handle_custom_time_request(callback: CallbackQuery, post_id: int, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    await state.update_data(scheduling_post_id=post_id)

    custom_time_text = (
        f"‚è∞ **–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ï –í–†–ï–ú–Ø**\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"`–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`\n\n"
        f"–ü—Ä–∏–º–µ—Ä—ã:\n"
        f"‚Ä¢ `25.12.2024 14:30`\n"
        f"‚Ä¢ `01.01.2025 09:00`\n\n"
        f"‚ö†Ô∏è –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –ø–æ–ø–∞–¥–∞—Ç—å –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞"
    )

    await callback.message.edit_text(
        text=custom_time_text,
        reply_markup=create_back_to_menu_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è")


async def handle_auto_distribute(callback: CallbackQuery, post_id: int, state: FSMContext):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ –±–ª–∏–∂–∞–π—à–∏–µ —Å–ª–æ—Ç—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
        post_data = post_storage.get_pending_post(post_id)
        if not post_data:
            await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç
        now = datetime.now()
        next_slot = time_slot_manager.get_next_available_slot(now + timedelta(minutes=30))

        if not next_slot:
            await callback.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤", show_alert=True)
            return

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ—Å—Ç
        scheduled_id = post_storage.schedule_post(
            processed_text=post_data['processed_text'],
            publish_time=next_slot,
            user_id=post_data['user_id'],
            original_message=post_data.get('original_message'),
            original_messages=post_data.get('original_messages')
        )

        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
        post_storage.remove_pending_post(post_id)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        formatted_time = time_slot_manager.format_datetime_for_user(next_slot)

        await callback.message.edit_text(
            text=f"üîÑ **–ê–í–¢–û–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï**\n\n"
                 f"–ü–æ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è:\n\n"
                 f"üìÖ **{formatted_time}**",
            reply_markup=create_back_to_menu_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer(f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {formatted_time}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.set_state(Menu.main)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)


@router.message(StateFilter(PostCreation.scheduling), F.from_user.id == ADMIN_ID)
async def handle_custom_time_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å—Ç–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        post_id = data.get('scheduling_post_id')

        if not post_id:
            await message.reply("‚ùå –û—à–∏–±–∫–∞: ID –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.set_state(Menu.main)
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
        post_data = post_storage.get_pending_post(post_id)
        if not post_data:
            await message.reply("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.set_state(Menu.main)
            return

        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        custom_time = time_slot_manager.parse_user_datetime(message.text)

        if not custom_time:
            await message.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –≤—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`",
                parse_mode="Markdown"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –≤ —Å–ª–æ—Ç—ã
        if not time_slot_manager.is_time_in_slots(custom_time):
            # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç
            nearest_slot = time_slot_manager.get_next_available_slot(custom_time)

            if nearest_slot:
                formatted_nearest = time_slot_manager.format_datetime_for_user(nearest_slot)
                await message.reply(
                    f"‚ö†Ô∏è –£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã\n\n"
                    f"–ë–ª–∏–∂–∞–π—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è: **{formatted_nearest}**\n\n"
                    f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è?",
                    parse_mode="Markdown"
                )
                # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                custom_time = nearest_slot
            else:
                await message.reply("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")
                return

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ—Å—Ç
        scheduled_id = post_storage.schedule_post(
            processed_text=post_data['processed_text'],
            publish_time=custom_time,
            user_id=post_data['user_id'],
            original_message=post_data.get('original_message'),
            original_messages=post_data.get('original_messages')
        )

        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
        post_storage.remove_pending_post(post_id)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        formatted_time = time_slot_manager.format_datetime_for_user(custom_time)

        await message.reply(
            f"‚úÖ **–ü–û–°–¢ –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù**\n\n"
            f"üìÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: **{formatted_time}**\n\n"
            f"–ü–æ—Å—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
            parse_mode="Markdown"
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.set_state(Menu.main)
        logger.info(f"–ü–æ—Å—Ç #{post_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ {custom_time}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏")
        await state.set_state(Menu.main)