# -*- coding: utf-8 -*-
import logging
from datetime import datetime, timedelta
import random
from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from states import PostCreation, Menu
from keyboards import (
    ScheduleAction, QueueAction,
    create_simple_scheduler_keyboard, create_back_to_menu_keyboard,
    create_queue_item_keyboard
)
from config import ADMIN_ID, MESSAGES, POSTING_SCHEDULE
from utils.post_storage import post_storage
from utils.time_slots import time_slot_manager

router = Router()
logger = logging.getLogger(__name__)


# =============================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê
# =============================================

@router.callback_query(ScheduleAction.filter())
async def handle_schedule_action(callback: CallbackQuery, callback_data: ScheduleAction, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    action = callback_data.action
    post_id = callback_data.post_id
    day = callback_data.day
    time_slot = callback_data.time_slot

    logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {action}, post_id: {post_id}, day: {day}, time_slot: {time_slot}")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç
    post_data = post_storage.get_pending_post(post_id)
    if not post_data:
        await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        logger.warning(f"–ü–æ—Å—Ç #{post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏")
        return

    try:
        if action == "none":
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ—Å—Ç
        scheduled_id = post_storage.schedule_post(
            processed_text=post_data['processed_text'],
            publish_time=schedule_time,
            user_id=post_data['user_id'],
            original_message=post_data.get('original_message'),
            original_messages=post_data.get('original_messages')
        )

        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
        post_storage.remove_pending_post(post_id)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        formatted_time = time_slot_manager.format_datetime_for_user(schedule_time)

        await callback.message.edit_text(
            text=f"‚úÖ **–ü–û–°–¢ –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù**\n\n"
                 f"üìÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: **{formatted_time}**\n\n"
                 f"–ü–æ—Å—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=create_back_to_menu_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {formatted_time}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.set_state(Menu.main)
        logger.info(f"–ü–æ—Å—Ç #{post_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {schedule_time}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)


# =============================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–ß–ï–†–ï–î–ò
# =============================================

@router.callback_query(QueueAction.filter())
async def handle_queue_action(callback: CallbackQuery, callback_data: QueueAction, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –æ—á–µ—Ä–µ–¥—å—é"""
    action = callback_data.action
    post_id = callback_data.post_id

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å –æ—á–µ—Ä–µ–¥—å—é: {action}, post_id: {post_id}")

    try:
        if action == "refresh":
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—á–µ—Ä–µ–¥–∏
            from handlers.menu import show_queue
            await show_queue(callback, state)

        elif action == "publish_now" and post_id:
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            await handle_queue_publish_now(callback, post_id, state)

        elif action == "change_time" and post_id:
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            await handle_queue_change_time(callback, post_id, state)

        elif action == "cancel" and post_id:
            # –û—Ç–º–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            await handle_queue_cancel(callback, post_id, state)

        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –æ—á–µ—Ä–µ–¥—å—é: {action}")
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –æ—á–µ—Ä–µ–¥—å—é {action}: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def handle_queue_publish_now(callback: CallbackQuery, post_id: int, state: FSMContext):
    """–ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ"""
    try:
        post_data = post_storage.get_scheduled_post(post_id)
        if not post_data:
            await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
        from services.publisher import publish_post_now
        success = await publish_post_now(post_data)

        if success:
            post_storage.mark_post_published(post_id)
            await callback.message.edit_text(
                text=f"‚úÖ **–ü–û–°–¢ –û–ü–£–ë–õ–ò–ö–û–í–ê–ù**\n\n"
                     f"–ü–æ—Å—Ç #{post_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!",
                reply_markup=create_back_to_menu_keyboard(),
                parse_mode="Markdown"
            )
            await callback.answer("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
            logger.info(f"–ü–æ—Å—Ç #{post_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", show_alert=True)


async def handle_queue_change_time(callback: CallbackQuery, post_id: int, state: FSMContext):
    """–ò–∑–º–µ–Ω—è–µ—Ç –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
    try:
        post_data = post_storage.get_scheduled_post(post_id)
        if not post_data:
            await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        await state.set_state(PostCreation.scheduling)
        await state.update_data(rescheduling_post_id=post_id)

        current_time = time_slot_manager.format_datetime_for_user(post_data['publish_time'])

        change_text = (
            f"‚è∞ **–ò–ó–ú–ï–ù–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ò –ü–û–°–¢–ê #{post_id}**\n\n"
            f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: **{current_time}**\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è:"
        )

        await callback.message.edit_text(
            text=change_text,
            reply_markup=create_simple_scheduler_keyboard(post_id),
            parse_mode="Markdown"
        )
        await callback.answer("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


async def handle_queue_cancel(callback: CallbackQuery, post_id: int, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–∞"""
    try:
        success = post_storage.cancel_scheduled_post(post_id)

        if success:
            await callback.message.edit_text(
                text=f"‚ùå **–ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –û–¢–ú–ï–ù–ï–ù–ê**\n\n"
                     f"–ü–æ—Å—Ç #{post_id} —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏.",
                reply_markup=create_back_to_menu_keyboard(),
                parse_mode="Markdown"
            )
            await callback.answer("‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            logger.info(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ #{post_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


# =============================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================================

def find_next_available_slot(target_time: datetime) -> datetime:
    """–ù–∞—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    current = target_time
    weekday_names = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']

    # –ò—â–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π
    for days_ahead in range(7):
        check_date = current + timedelta(days=days_ahead)
        weekday = check_date.weekday()
        day_name = weekday_names[weekday]

        day_schedule = POSTING_SCHEDULE.get(day_name, [])

        for slot in day_schedule:
            start_time = datetime.strptime(slot['start'], '%H:%M').time()
            end_time = datetime.strptime(slot['end'], '%H:%M').time()

            slot_start = check_date.replace(
                hour=start_time.hour,
                minute=start_time.minute,
                second=0,
                microsecond=0
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
            if end_time < start_time:
                slot_end = slot_start + timedelta(hours=24)
                slot_end = slot_end.replace(hour=end_time.hour, minute=end_time.minute)
            else:
                slot_end = check_date.replace(
                    hour=end_time.hour,
                    minute=end_time.minute,
                    second=0,
                    microsecond=0
                )

            # –ï—Å–ª–∏ —Å–ª–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ü–µ–ª–µ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            if slot_start > target_time:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Å–ª–æ—Ç–µ
                slot_duration = (slot_end - slot_start).total_seconds()
                random_offset = random.randint(0, int(slot_duration) // 60)  # –í –º–∏–Ω—É—Ç–∞—Ö
                return slot_start + timedelta(minutes=random_offset)

    return None –ü—É—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏)
            await callback.answer()
            return

        elif action == "day_morning":
            # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å —É—Ç—Ä–æ–º (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
            await handle_day_schedule(callback, post_id, day, "morning", state)

        elif action == "quick_time":
            # –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ (—É—Ç—Ä–æ/–≤–µ—á–µ—Ä/–Ω–æ—á—å)
            await handle_quick_time_selection(callback, post_id, time_slot, state)

        elif action == "quick":
            # –û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä (30 –º–∏–Ω, 1 —á–∞—Å)
            await handle_very_quick_schedule(callback, post_id, time_slot, state)

        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {action}")
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ {action}: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def handle_day_schedule(callback: CallbackQuery, post_id: int, selected_day: str, time_period: str,
                              state: FSMContext):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–æ—Å—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–∞–∫–æ–π –¥–µ–Ω—å
        now = datetime.now()
        weekday_names = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
        target_weekday = weekday_names.index(selected_day)

        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Ç–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        current_weekday = now.weekday()
        days_ahead = (target_weekday - current_weekday) % 7

        if days_ahead == 0:
            days_ahead = 7  # –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —Ç–æ—Ç –∂–µ –¥–µ–Ω—å

        target_date = now + timedelta(days=days_ahead)

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–Ω—è
        day_schedule = POSTING_SCHEDULE.get(selected_day, [])
        if not day_schedule:
            await callback.answer("‚ùå –ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è", show_alert=True)
            return

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–ª–æ—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        slot = random.choice(day_schedule)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å–ª–æ—Ç–∞
        start_time = datetime.strptime(slot['start'], '%H:%M').time()
        end_time = datetime.strptime(slot['end'], '%H:%M').time()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
        if end_time < start_time:
            end_hour = end_time.hour + 24
        else:
            end_hour = end_time.hour

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è
        start_minutes = start_time.hour * 60 + start_time.minute
        end_minutes = end_hour * 60 + end_time.minute

        random_minutes = random.randint(start_minutes, end_minutes - 1)
        random_hour = random_minutes // 60
        random_minute = random_minutes % 60

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
        if random_hour >= 24:
            random_hour -= 24
            target_date += timedelta(days=1)

        schedule_time = target_date.replace(
            hour=random_hour,
            minute=random_minute,
            second=0,
            microsecond=0
        )

        await schedule_post_and_finish(callback, post_id, schedule_time, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)


async def handle_quick_time_selection(callback: CallbackQuery, post_id: int, time_slot: str, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ (—É—Ç—Ä–æ/–≤–µ—á–µ—Ä/–Ω–æ—á—å)"""
    try:
        now = datetime.now()
        schedule_time = None

        time_ranges = {
            'morning': (10, 12),  # 10:00-12:00
            'evening': (19, 22),  # 19:00-22:00
            'night': (23, 1)  # 23:00-01:00
        }

        if time_slot not in time_ranges:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç", show_alert=True)
            return

        start_hour, end_hour = time_ranges[time_slot]

        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–µ–Ω—å
        for days_ahead in range(7):
            check_date = now + timedelta(days=days_ahead)
            weekday = check_date.weekday()

            weekday_names = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
            day_name = weekday_names[weekday]

            day_schedule = POSTING_SCHEDULE.get(day_name, [])

            for slot in day_schedule:
                slot_start_hour = int(slot['start'].split(':')[0])
                slot_end_hour = int(slot['end'].split(':')[0])

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
                if slot_end_hour < slot_start_hour:
                    slot_end_hour += 24

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –Ω—É–∂–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
                if time_slot == 'night' and start_hour == 23:
                    if (slot_start_hour >= 23 or slot_end_hour <= 1 or
                            (slot_start_hour <= 23 and slot_end_hour >= 24)):
                        if slot_start_hour >= 23:
                            random_hour = random.randint(23, min(23, slot_end_hour))
                        else:
                            random_hour = random.randint(max(0, slot_start_hour), min(1, slot_end_hour))

                        random_minute = random.randint(0, 59)
                        schedule_time = check_date.replace(hour=random_hour, minute=random_minute, second=0,
                                                           microsecond=0)
                        break
                else:
                    if (slot_start_hour <= start_hour and slot_end_hour >= end_hour) or \
                            (slot_start_hour < end_hour and slot_end_hour > start_hour):
                        actual_start = max(slot_start_hour, start_hour)
                        actual_end = min(slot_end_hour, end_hour)

                        if actual_start < actual_end:
                            random_hour = random.randint(actual_start, actual_end - 1)
                            random_minute = random.randint(0, 59)
                            schedule_time = check_date.replace(hour=random_hour, minute=random_minute, second=0,
                                                               microsecond=0)
                            break

            if schedule_time:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
                if schedule_time > now:
                    break
                else:
                    schedule_time = None

        if not schedule_time:
            await callback.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏", show_alert=True)
            return

        await schedule_post_and_finish(callback, post_id, schedule_time, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)


async def handle_very_quick_schedule(callback: CallbackQuery, post_id: int, time_slot: str, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (30 –º–∏–Ω, 1 —á–∞—Å)"""
    try:
        now = datetime.now()

        if time_slot == "30min":
            target_time = now + timedelta(minutes=30)
        elif time_slot == "1hour":
            target_time = now + timedelta(hours=1)
        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è", show_alert=True)
            return

        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç
        schedule_time = find_next_available_slot(target_time)

        if not schedule_time:
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤", show_alert=True)
            return

        await schedule_post_and_finish(callback, post_id, schedule_time, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


async def schedule_post_and_finish(callback: CallbackQuery, post_id: int, schedule_time: datetime, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
        post_data = post_storage.get_pending_post(post_id)
        if not post_data:
            await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        #