# -*- coding: utf-8 -*-
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from states import Settings, Menu
from keyboards import (
    SettingsAction, PromptAction, AdminAction,
    create_settings_keyboard, create_prompt_edit_keyboard,
    create_admin_confirm_keyboard, create_back_to_settings_keyboard,
    create_back_to_menu_keyboard
)
from config import ADMIN_ID, MESSAGES, PROMPT_NAMES, GROUP_ID
from services.ai_processor import ai_processor
from utils.post_storage import post_storage

router = Router()
logger = logging.getLogger(__name__)


@router.callback_query(SettingsAction.filter(F.action == "none"))
async def handle_empty_action(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (–¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏)"""
    await callback.answer()


@router.callback_query(SettingsAction.filter(F.action == "edit_prompt"))
async def show_prompt_editor(callback: CallbackQuery, callback_data: SettingsAction, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–∞"""
    prompt_type = callback_data.prompt_type

    if not prompt_type or prompt_type not in PROMPT_NAMES:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–º–ø—Ç–∞", show_alert=True)
        return

    await state.set_state(Settings.main)

    prompt_name = PROMPT_NAMES[prompt_type]
    edit_text = (
        f"üìù **–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ú–ü–¢–ê**\n\n"
        f"**–¢–∏–ø:** {prompt_name}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    await callback.message.edit_text(
        text=edit_text,
        reply_markup=create_prompt_edit_keyboard(prompt_type),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(PromptAction.filter(F.action == "view"))
async def view_current_prompt(callback: CallbackQuery, callback_data: PromptAction):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç"""
    prompt_type = callback_data.prompt_type

    try:
        prompt_content = await ai_processor.load_prompt(prompt_type)
        prompt_name = PROMPT_NAMES.get(prompt_type, prompt_type)

        # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        if len(prompt_content) > 3000:
            prompt_content = prompt_content[:3000] + "\n\n... (–æ–±—Ä–µ–∑–∞–Ω–æ)"

        view_text = (
            f"üìñ **–¢–ï–ö–£–©–ò–ô –ü–†–û–ú–ü–¢: {prompt_name}**\n\n"
            f"```\n{prompt_content}\n```"
        )

        await callback.message.edit_text(
            text=view_text,
            reply_markup=create_prompt_edit_keyboard(prompt_type),
            parse_mode="Markdown"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–º–ø—Ç–∞ {prompt_type}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞", show_alert=True)


@router.callback_query(PromptAction.filter(F.action == "edit"))
async def start_prompt_editing(callback: CallbackQuery, callback_data: PromptAction, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞"""
    prompt_type = callback_data.prompt_type

    await state.set_state(Settings.editing_prompt)
    await state.update_data(editing_prompt_type=prompt_type)

    prompt_name = PROMPT_NAMES.get(prompt_type, prompt_type)

    edit_text = (
        f"‚úèÔ∏è **–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ú–ü–¢–ê**\n\n"
        f"**–¢–∏–ø:** {prompt_name}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞:"
    )

    await callback.message.edit_text(
        text=edit_text,
        reply_markup=create_back_to_settings_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞")


@router.callback_query(PromptAction.filter(F.action == "reset"))
async def reset_prompt(callback: CallbackQuery, callback_data: PromptAction):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"""
    prompt_type = callback_data.prompt_type

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        default_prompt = ai_processor._get_default_prompt(prompt_type)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
        success = await ai_processor.save_prompt(prompt_type, default_prompt)

        if success:
            prompt_name = PROMPT_NAMES.get(prompt_type, prompt_type)
            await callback.message.edit_text(
                text=f"‚úÖ **–ü–†–û–ú–ü–¢ –°–ë–†–û–®–ï–ù**\n\n"
                     f"–ü—Ä–æ–º–ø—Ç \"{prompt_name}\" —Å–±—Ä–æ—à–µ–Ω –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π.",
                reply_markup=create_prompt_edit_keyboard(prompt_type),
                parse_mode="Markdown"
            )
            await callback.answer("‚úÖ –ü—Ä–æ–º–ø—Ç —Å–±—Ä–æ—à–µ–Ω")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–º–ø—Ç–∞", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–º–ø—Ç–∞ {prompt_type}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞", show_alert=True)


@router.message(StateFilter(Settings.editing_prompt), F.from_user.id == ADMIN_ID)
async def handle_prompt_edit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞"""
    data = await state.get_data()
    prompt_type = data.get('editing_prompt_type')

    if not prompt_type:
        await message.reply("‚ùå –û—à–∏–±–∫–∞: —Ç–∏–ø –ø—Ä–æ–º–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.set_state(Settings.main)
        return

    try:
        new_prompt_text = message.text.strip()

        if not new_prompt_text:
            await message.reply("‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        success = await ai_processor.save_prompt(prompt_type, new_prompt_text)

        if success:
            prompt_name = PROMPT_NAMES.get(prompt_type, prompt_type)
            await message.reply(
                f"‚úÖ **–ü–†–û–ú–ü–¢ –û–ë–ù–û–í–õ–ï–ù**\n\n"
                f"–ü—Ä–æ–º–ø—Ç \"{prompt_name}\" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
                parse_mode="Markdown"
            )
            await state.set_state(Settings.main)
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")


@router.callback_query(SettingsAction.filter(F.action == "stats"))
async def show_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    try:
        stats = post_storage.get_stats()

        stats_text = (
            f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê**\n\n"
            f"üìù –û–∂–∏–¥–∞—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤: {stats['pending_posts']}\n"
            f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {stats['scheduled_posts']}\n"
            f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {stats['published_posts']}\n"
            f"üìà –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_processed']}\n\n"
            f"üë§ –¢–µ–∫—É—â–∏–π –∞–¥–º–∏–Ω: {ADMIN_ID}\n"
            f"üì¢ –ì—Ä—É–ø–ø–∞: `{GROUP_ID}`"
        )

        await callback.message.edit_text(
            text=stats_text,
            reply_markup=create_back_to_settings_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


@router.callback_query(SettingsAction.filter(F.action == "change_admin"))
async def start_admin_change(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–º–µ–Ω—ã –∞–¥–º–∏–Ω–∞"""
    await state.set_state(Settings.changing_admin)

    change_text = (
        f"üë§ **–°–ú–ï–ù–ê –ê–î–ú–ò–ù–ê**\n\n"
        f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï:** –ü–æ—Å–ª–µ —Å–º–µ–Ω—ã –∞–¥–º–∏–Ω–∞ –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É!\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):"
    )

    await callback.message.edit_text(
        text=change_text,
        reply_markup=create_back_to_settings_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer("üë§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞")


@router.message(StateFilter(Settings.changing_admin), F.from_user.id == ADMIN_ID)
async def handle_admin_change(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–º–µ–Ω—É –∞–¥–º–∏–Ω–∞"""
    try:
        new_admin_id = int(message.text.strip())

        if new_admin_id == ADMIN_ID:
            await message.reply("‚ùå –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm_text = (
            f"‚ö†Ô∏è **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –°–ú–ï–ù–´ –ê–î–ú–ò–ù–ê**\n\n"
            f"–ù–æ–≤—ã–π –∞–¥–º–∏–Ω: `{new_admin_id}`\n\n"
            f"**–í—ã —É–≤–µ—Ä–µ–Ω—ã?** –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É!"
        )

        await message.reply(
            text=confirm_text,
            reply_markup=create_admin_confirm_keyboard(new_admin_id),
            parse_mode="Markdown"
        )

    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –∞–¥–º–∏–Ω–∞: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ID")


@router.callback_query(AdminAction.filter(F.action == "confirm"))
async def confirm_admin_change(callback: CallbackQuery, callback_data: AdminAction, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–º–µ–Ω—É –∞–¥–º–∏–Ω–∞"""
    new_admin_id = callback_data.admin_id

    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞/–ë–î
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º

        await callback.message.edit_text(
            text=f"‚ö†Ô∏è **–§–£–ù–ö–¶–ò–Ø –í –†–ê–ó–†–ê–ë–û–¢–ö–ï**\n\n"
                 f"–°–º–µ–Ω–∞ –∞–¥–º–∏–Ω–∞ –Ω–∞ ID {new_admin_id} –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.\n\n"
                 f"–î–ª—è —Å–º–µ–Ω—ã –∞–¥–º–∏–Ω–∞ —Å–µ–π—á–∞—Å –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ADMIN_ID –≤ .env —Ñ–∞–π–ª–µ.",
            reply_markup=create_back_to_settings_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ–Ω—ã –∞–¥–º–∏–Ω–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(SettingsAction.filter(F.action == "change_group"))
async def start_group_change(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–º–µ–Ω—ã –≥—Ä—É–ø–ø—ã"""
    await state.set_state(Settings.changing_group)

    change_text = (
        f"üì¢ **–°–ú–ï–ù–ê –ì–†–£–ü–ü–´**\n\n"
        f"–¢–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞: `{GROUP_ID}`\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100):"
    )

    await callback.message.edit_text(
        text=change_text,
        reply_markup=create_back_to_settings_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer("üì¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã")


@router.message(StateFilter(Settings.changing_group), F.from_user.id == ADMIN_ID)
async def handle_group_change(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–º–µ–Ω—É –≥—Ä—É–ø–ø—ã"""
    try:
        new_group_id = int(message.text.strip())

        if new_group_id == GROUP_ID:
            await message.reply("‚ùå –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
            return

        if not str(new_group_id).startswith('-100'):
            await message.reply("‚ùå ID –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å -100")
            return

        # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ
        await message.reply(
            text=f"‚ö†Ô∏è **–§–£–ù–ö–¶–ò–Ø –í –†–ê–ó–†–ê–ë–û–¢–ö–ï**\n\n"
                 f"–°–º–µ–Ω–∞ –≥—Ä—É–ø–ø—ã –Ω–∞ ID {new_group_id} –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.\n\n"
                 f"–î–ª—è —Å–º–µ–Ω—ã –≥—Ä—É–ø–ø—ã —Å–µ–π—á–∞—Å –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é GROUP_ID –≤ .env —Ñ–∞–π–ª–µ.",
            parse_mode="Markdown"
        )

        await state.set_state(Settings.main)

    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –≥—Ä—É–ø–ø—ã: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ID")


# –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —á–µ—Ä–µ–∑ MenuAction
@router.callback_query(F.data == "menu:settings")
async def handle_back_to_settings_via_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —á–µ—Ä–µ–∑ MenuAction"""
    await show_settings_from_callback(callback, state)


async def show_settings_from_callback(callback: CallbackQuery, state: FSMContext):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await state.set_state(Settings.main)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–µ
    admin_username = "admin"  # –ó–∞–≥–ª—É—à–∫–∞
    admin_id = ADMIN_ID
    group_name = f"–ì—Ä—É–ø–ø–∞ {GROUP_ID}"  # –ó–∞–≥–ª—É—à–∫–∞

    settings_text = (
        f"‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê**\n\n"
        f"üë§ –¢–µ–∫—É—â–∏–π –∞–¥–º–∏–Ω: @{admin_username} ({admin_id})\n"
        f"üì¢ –ì—Ä—É–ø–ø–∞ –¥–ª—è –ø–æ—Å—Ç–æ–≤: {group_name}\n"
        f"ID: `{GROUP_ID}`\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"
    )

    await callback.message.edit_text(
        text=settings_text,
        reply_markup=create_settings_keyboard(
            admin_username=admin_username,
            admin_id=admin_id,
            group_name=group_name,
            group_id=GROUP_ID
        ),
        parse_mode="Markdown"
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback'–æ–≤ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
@router.callback_query(StateFilter(Settings))
async def handle_unknown_settings_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback'–æ–≤ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"""
    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö: {callback.data}")
    await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)