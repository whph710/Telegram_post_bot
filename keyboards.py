# -*- coding: utf-8 -*-
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.callback_data import CallbackData
from typing import List, Optional
from config import BUTTONS


# =============================================
# CALLBACK DATA –ö–õ–ê–°–°–´
# =============================================

class MenuAction(CallbackData, prefix="menu"):
    action: str


class PostAction(CallbackData, prefix="post"):
    action: str
    post_id: int


class ScheduleAction(CallbackData, prefix="schedule"):
    action: str
    post_id: int
    day: Optional[str] = None
    time_slot: Optional[str] = None


class QueueAction(CallbackData, prefix="queue"):
    action: str
    post_id: Optional[int] = None


class SettingsAction(CallbackData, prefix="settings"):
    action: str
    prompt_type: Optional[str] = None


class PromptAction(CallbackData, prefix="prompt"):
    action: str
    prompt_type: str


class AdminAction(CallbackData, prefix="admin"):
    action: str
    admin_id: Optional[int] = None


# =============================================
# –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
# =============================================

def create_main_menu() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        from utils.post_storage import post_storage
        scheduled_count = len(post_storage.get_scheduled_posts())
    except Exception:
        scheduled_count = 0

    buttons = [
        [InlineKeyboardButton(
            text=BUTTONS['create_post'],
            callback_data=MenuAction(action="create_post").pack()
        )],
        [
            InlineKeyboardButton(
                text="‚îÄ‚îÄ‚îÄ‚îÄ –°–ò–°–¢–ï–ú–ê ‚îÄ‚îÄ‚îÄ‚îÄ",
                callback_data=SettingsAction(action="none").pack()
            )
        ],
        [
            InlineKeyboardButton(
                text=BUTTONS['change_admin'],
                callback_data=SettingsAction(action="change_admin").pack()
            ),
            InlineKeyboardButton(
                text=BUTTONS['change_group'],
                callback_data=SettingsAction(action="change_group").pack()
            )
        ],
        [
            InlineKeyboardButton(
                text=BUTTONS['show_stats'],
                callback_data=SettingsAction(action="stats").pack()
            )
        ],
        [
            InlineKeyboardButton(
                text=BUTTONS['back_to_menu'],
                callback_data=MenuAction(action="main").pack()
            )
        ]
    ])


# =============================================
# –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ú–ü–¢–û–í
# =============================================

def create_prompt_edit_keyboard(prompt_type: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=BUTTONS['view_current_prompt'],
                callback_data=PromptAction(action="view", prompt_type=prompt_type).pack()
            )
        ],
        [
            InlineKeyboardButton(
                text=BUTTONS['edit_prompt'],
                callback_data=PromptAction(action="edit", prompt_type=prompt_type).pack()
            )
        ],
        [
            InlineKeyboardButton(
                text=BUTTONS['reset_prompt'],
                callback_data=PromptAction(action="reset", prompt_type=prompt_type).pack()
            )
        ],
        [
            InlineKeyboardButton(
                text=BUTTONS['back_to_settings'],
                callback_data=MenuAction(action="settings").pack()
            )
        ]
    ])


# =============================================
# –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø
# =============================================

def create_admin_confirm_keyboard(new_admin_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ–Ω—ã –∞–¥–º–∏–Ω–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=BUTTONS['confirm_yes'],
                callback_data=AdminAction(action="confirm", admin_id=new_admin_id).pack()
            )
        ],
        [
            InlineKeyboardButton(
                text=BUTTONS['confirm_no'],
                callback_data=MenuAction(action="settings").pack()
            )
        ]
    ])


def create_back_to_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" """
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=BUTTONS['back_to_menu'],
                callback_data=MenuAction(action="main").pack()
            )
        ]
    ])


def create_back_to_settings_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º" """
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=BUTTONS['back_to_settings'],
                callback_data=MenuAction(action="settings").pack()
            )
        ]
    ])(
                text=BUTTONS['auto_mode'],
                callback_data=MenuAction(action="auto_mode_info").pack()
            ),
            InlineKeyboardButton(
                text=BUTTONS['settings'],
                callback_data=MenuAction(action="settings").pack()
            )
        ]
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—á–µ—Ä–µ–¥–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    if scheduled_count > 0:
        queue_text = f"üìã –û—á–µ—Ä–µ–¥—å ({scheduled_count})"
    else:
        queue_text = "üìã –û—á–µ—Ä–µ–¥—å"

    buttons.append([
        InlineKeyboardButton(
            text=queue_text,
            callback_data=MenuAction(action="queue").pack()
        )
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


# =============================================
# –ü–†–ï–í–¨–Æ –ü–û–°–¢–ê
# =============================================

def create_post_preview_keyboard(post_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=BUTTONS['publish_now'],
                callback_data=PostAction(action="publish", post_id=post_id).pack()
            ),
            InlineKeyboardButton(
                text=BUTTONS['schedule_post'],
                callback_data=PostAction(action="schedule", post_id=post_id).pack()
            )
        ],
        [
            InlineKeyboardButton(
                text=BUTTONS['improve_post'],
                callback_data=PostAction(action="edit", post_id=post_id).pack()
            ),
            InlineKeyboardButton(
                text=BUTTONS['delete_post'],
                callback_data=PostAction(action="delete", post_id=post_id).pack()
            )
        ],
        [
            InlineKeyboardButton(
                text=BUTTONS['back_to_menu'],
                callback_data=MenuAction(action="main").pack()
            )
        ]
    ])


# =============================================
# –£–ü–†–û–©–ï–ù–ù–´–ô –ü–õ–ê–ù–ò–†–û–í–©–ò–ö
# =============================================

def create_simple_scheduler_keyboard(post_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
    return InlineKeyboardMarkup(inline_keyboard=[
        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
        [
            InlineKeyboardButton(
                text="–ü–ù",
                callback_data=ScheduleAction(action="day_morning", post_id=post_id, day="monday").pack()
            ),
            InlineKeyboardButton(
                text="–í–¢",
                callback_data=ScheduleAction(action="day_morning", post_id=post_id, day="tuesday").pack()
            ),
            InlineKeyboardButton(
                text="–°–†",
                callback_data=ScheduleAction(action="day_morning", post_id=post_id, day="wednesday").pack()
            ),
            InlineKeyboardButton(
                text="–ß–¢",
                callback_data=ScheduleAction(action="day_morning", post_id=post_id, day="thursday").pack()
            )
        ],
        [
            InlineKeyboardButton(
                text="–ü–¢",
                callback_data=ScheduleAction(action="day_morning", post_id=post_id, day="friday").pack()
            ),
            InlineKeyboardButton(
                text="–°–ë",
                callback_data=ScheduleAction(action="day_morning", post_id=post_id, day="saturday").pack()
            ),
            InlineKeyboardButton(
                text="–í–°",
                callback_data=ScheduleAction(action="day_morning", post_id=post_id, day="sunday").pack()
            )
        ],
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        [
            InlineKeyboardButton(
                text="‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í–†–ï–ú–Ø –î–ù–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
                callback_data=ScheduleAction(action="none", post_id=post_id).pack()
            )
        ],
        # –í—Ä–µ–º—è —Å—É—Ç–æ–∫
        [
            InlineKeyboardButton(
                text="üåÖ –£—Ç—Ä–æ (10:00-12:00)",
                callback_data=ScheduleAction(action="quick_time", post_id=post_id, time_slot="morning").pack()
            )
        ],
        [
            InlineKeyboardButton(
                text="üåÜ –í–µ—á–µ—Ä (19:00-22:00)",
                callback_data=ScheduleAction(action="quick_time", post_id=post_id, time_slot="evening").pack()
            )
        ],
        [
            InlineKeyboardButton(
                text="üåô –ù–æ—á—å (23:00-01:00)",
                callback_data=ScheduleAction(action="quick_time", post_id=post_id, time_slot="night").pack()
            )
        ],
        # –ë—ã—Å—Ç—Ä—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        [
            InlineKeyboardButton(
                text="‚ö° –ß–µ—Ä–µ–∑ 30 –º–∏–Ω",
                callback_data=ScheduleAction(action="quick", post_id=post_id, time_slot="30min").pack()
            ),
            InlineKeyboardButton(
                text="üïê –ß–µ—Ä–µ–∑ 1 —á–∞—Å",
                callback_data=ScheduleAction(action="quick", post_id=post_id, time_slot="1hour").pack()
            )
        ],
        [
            InlineKeyboardButton(
                text=BUTTONS['back_to_menu'],
                callback_data=MenuAction(action="main").pack()
            )
        ]
    ])


# =============================================
# –û–ß–ï–†–ï–î–¨ –ü–û–°–¢–û–í
# =============================================

def create_queue_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ –ø–æ—Å—Ç–æ–≤"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=BUTTONS['refresh_queue'],
                callback_data=QueueAction(action="refresh").pack()
            )
        ],
        [
            InlineKeyboardButton(
                text=BUTTONS['back_to_menu'],
                callback_data=MenuAction(action="main").pack()
            )
        ]
    ])


def create_queue_item_keyboard(post_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—á–µ—Ä–µ–¥–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=BUTTONS['publish_now_queue'],
                callback_data=QueueAction(action="publish_now", post_id=post_id).pack()
            )
        ],
        [
            InlineKeyboardButton(
                text=BUTTONS['change_time'],
                callback_data=QueueAction(action="change_time", post_id=post_id).pack()
            )
        ],
        [
            InlineKeyboardButton(
                text=BUTTONS['cancel_publication'],
                callback_data=QueueAction(action="cancel", post_id=post_id).pack()
            )
        ],
        [
            InlineKeyboardButton(
                text=BUTTONS['back_to_menu'],
                callback_data=MenuAction(action="main").pack()
            )
        ]
    ])


# =============================================
# –ù–ê–°–¢–†–û–ô–ö–ò
# =============================================

def create_settings_keyboard(admin_username: str, admin_id: int, group_name: str,
                             group_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚îÄ‚îÄ‚îÄ‚îÄ –ü–†–û–ú–ü–¢–´ ‚îÄ‚îÄ‚îÄ‚îÄ",
                callback_data=SettingsAction(action="none").pack()
            )
        ],
        [
            InlineKeyboardButton(
                text=BUTTONS['edit_style_prompt'],
                callback_data=SettingsAction(action="edit_prompt", prompt_type="style_formatting").pack()
            )
        ],
        [
            InlineKeyboardButton(
                text=BUTTONS['edit_group_prompt'],
                callback_data=SettingsAction(action="edit_prompt", prompt_type="group_processing").pack()
            )
        ],
        [
            InlineKeyboardButton(
                text=BUTTONS['edit_improve_prompt'],
                callback_data=SettingsAction(action="edit_prompt", prompt_type="post_improvement").pack()
            )
        ],
        [
            InlineKeyboardButton