# -*- coding: utf-8 -*-
import asyncio
import logging
import sys
import os

from bot import bot, dp
from config import ADMIN_ID, MESSAGES, SETTINGS

# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
from handlers import menu, post_creation, settings, scheduler

# –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
from services.scheduler_service import SchedulerService
from services.ai_processor import ai_processor

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler_service = None


async def create_prompt_files():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã –ø—Ä–æ–º–ø—Ç–æ–≤ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
    from config import PROMPT_PATHS

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é prompts –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    prompts_dir = "prompts"
    if not os.path.exists(prompts_dir):
        os.makedirs(prompts_dir)
        logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {prompts_dir}")

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
    for prompt_type, file_path in PROMPT_PATHS.items():
        if not os.path.exists(file_path):
            default_prompt = ai_processor._get_default_prompt(prompt_type)
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(default_prompt)
                logging.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –ø—Ä–æ–º–ø—Ç–∞: {file_path}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")


async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    global scheduler_service

    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–º–ø—Ç–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        await create_prompt_files()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AI
        ai_connected = await ai_processor.validate_connection()
        if ai_connected:
            logging.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AI —Å–µ—Ä–≤–∏—Å—É –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ")
        else:
            logging.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ AI —Å–µ—Ä–≤–∏—Å—É")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler_service = SchedulerService(bot)
        await scheduler_service.start()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –∑–∞–ø—É—Å–∫–µ
        await bot.send_message(ADMIN_ID, MESSAGES['bot_started'])
        logging.info("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")


async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    global scheduler_service

    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        if scheduler_service:
            await scheduler_service.stop()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        try:
            await bot.send_message(ADMIN_ID, MESSAGES['bot_stopping'])
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏

        logging.info("üõë –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}")


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=getattr(logging, SETTINGS['log_level'].upper()),
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S",
        handlers=[
            logging.FileHandler(SETTINGS['log_file'], encoding='utf-8', mode='a'),
            logging.StreamHandler()
        ]
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger("aiogram.event").setLevel(logging.WARNING)
    logging.getLogger("aiogram.dispatcher").setLevel(logging.WARNING)
    logging.getLogger("aiohttp").setLevel(logging.WARNING)
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("openai._base_client").setLevel(logging.WARNING)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging()
    logger = logging.getLogger(__name__)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not ADMIN_ID:
        logger.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω ADMIN_ID")
        sys.exit(1)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(menu.router)
    dp.include_router(post_creation.router)
    dp.include_router(settings.router)
    dp.include_router(scheduler.router)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        await dp.start_polling(bot, skip_updates=True)

    except KeyboardInterrupt:
        logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)